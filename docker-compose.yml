version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: protein_synthesis
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - protein-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:80"
    environment:
      - VITE_API_BASE_URL=http://localhost:8000/api
      - VITE_AI_SERVICE_URL=http://localhost:8001
    depends_on:
      - backend
      - ai-service
    networks:
      - protein-network
    restart: unless-stopped

  # Backend service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      # Database Configuration
      - DB_TYPE=postgresql
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=protein_synthesis
      - DB_USER=postgres
      - DB_PASSWORD=postgres_password

      # Other services
      - REDIS_URL=redis://redis:6379/0
      - AI_SERVICE_URL=http://ai-service:8001

      # Security
      - SECRET_KEY=${JWT_SECRET_KEY}
      - JWT_ALGORITHM=HS256
      - ACCESS_TOKEN_EXPIRE_MINUTES=30

      # Email (optional - can be configured later)
      - SMTP_SERVER=smtp.gmail.com
      - SMTP_PORT=587
      - SMTP_USERNAME=${SMTP_USERNAME}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - FROM_EMAIL=noreply@proteinsynth.com

      # Application settings
      - DEBUG=False
      - LOG_LEVEL=INFO
      - UPLOAD_DIR=/app/uploads
      - MAX_FILE_SIZE=100
    volumes:
      - ./backend/uploads:/app/uploads
      - ./backend/logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - protein-network
    restart: unless-stopped

  # AI service
  ai-service:
    build:
      context: ./ai-service
      dockerfile: Dockerfile
    ports:
      - "8001:8001"
    environment:
      - MODEL_PATH=/app/models
      - CACHE_SIZE=1000
      - MAX_MEMORY_GB=4
      - LOG_LEVEL=INFO
    volumes:
      - ./ai-service/models:/app/models
      - ./ai-service/cache:/app/cache
      - ./ai-service/logs:/app/logs
    deploy:
      resources:
        limits:
          memory: 6G
        reservations:
          memory: 2G
    networks:
      - protein-network
    restart: unless-stopped

  # Redis cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    networks:
      - protein-network
    restart: unless-stopped

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
      - ai-service
    networks:
      - protein-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  backend_data:
  ai_models:

networks:
  protein-network:
    driver: bridge